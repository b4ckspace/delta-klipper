[gcode_macro POWER_OFF_PRINTER]
gcode:
  {action_call_remote_method("set_device_power", device="printer", state="off")}

[gcode_macro POWER_ON_PRINTER]
gcode:
  {action_call_remote_method("set_device_power", device="printer", state="on")}

[gcode_macro BED_MESH_CALIBRATE]
rename_existing: _BED_MESH_CALIBRATE
gcode:

    {% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}                                # Gather all object points
    {% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}                                                          # Get bed mesh min from printer.cfg
    {% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}                                                          # Get bed mesh max from printer.cfg
    {% set probe_count = printer.configfile.settings.bed_mesh.probe_count %} 
    {% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}                            # Determine max probe point distance
    {% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}    
    {% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}                                                # Set x_min from smallest object x point
    {% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}                                                # Set y_min from smallest object y point
    {% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}                                                # Set x_max from largest object x point
    {% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}  
    {% set fuzz_amount = 1 %}
    {% set mesh_margin = 0 %}

    {% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}                                                          # Set fuzz_range between 0 and fuzz_amount
    {% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}            # Adapt x_min to margin and fuzz constraints
    {% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}            # Adapt y_min to margin and fuzz constraints
    {% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}            # Adapt x_max to margin and fuzz constraints
    {% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}

    {% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}                                                               # Compare adjustments to defaults and choose max
    {% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}                                                               # Compare adjustments to defaults and choose max
    {% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}                                                               # Compare adjustments to defaults and choose min
    {% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}   

    {% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method='ceil') | int) + 1 %}          # Define probe_count's x point count and round up
    {% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method='ceil') | int) + 1 %}          # Define probe_count's y point count and round up


    {% if (([points_x, points_y]|max) > 6) %}                                                                                       # 
        {% set algorithm = "bicubic" %}                                                                                             # 
        {% set min_points = 4 %}                                                                                                    # 
    {% else %}                                                                                                                      # Calculate if algorithm should be bicubic or lagrange
        {% set algorithm = "lagrange" %}                                                                                            # 
        {% set min_points = 3 %}                                                                                                    # 
    {% endif %}                                                                                                                     # 

    {% set points_x = [points_x , min_points]|max %}                                                                                # Set probe_count's x points to fit the calculated algorithm
    {% set points_y = [points_y , min_points]|max %}                                                                                # Set probe_count's y points to fit the calculated algorithm
    {% set points_x = [points_x , probe_count[0]]|min %}
    {% set points_y = [points_y , probe_count[1]]|min %}

    _BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}

[gcode_macro LINE_PURGE]
description: A purge macro that adapts to be near your actual printed objects
gcode:
    {% set travel_speed = 15000 %}
    {% set cross_section = 5 %}
    {% set purge_height = 0.8 %} ; Z distance while purging
    {% set tip_distance = 5 %} ; Value of retract after last print
    {% set purge_margin = 10 %} ; Distance from print object
    {% set purge_amount = 15 %} ; mm of filament tu purge
    {% set flow_rate = 12 %}

    {% set min_y = -110 %}
    {% set min_x = -110 %}

    {% set RETRACT = 'G1 E1 F2100' | string %}
    {% set UNRETRACT = 'G1 E1 F2100' | string %}

    # Calculate purge origins and centers from objects
    {% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}    # Get all object points
    {% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}                          # Object x min
    {% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}                          # Object x max
    {% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}                          # Object y min
    {% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}                          # Object y max

    {% if pruge_x_min == 0 and purge_y_min == 0 %}
        # fallback purge in corner
        {% set purge_x_origin = -80 %} 
        {% set purge_y_origin = -80 %}
    {% else %}
        # purge next to print
        {% set purge_x_origin = purge_x_min - purge_margin %} # Add margin to x min
        {% set purge_y_origin = purge_y_min - purge_margin %} # Add margin to y min
    {% endif %}

    {action_respond_info("purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(
        (purge_x_origin),
        (purge_y_origin),
        (purge_amount),
        (flow_rate),
    )) }

    {% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}

    SAVE_GCODE_STATE NAME=Prepurge_State  ; save current state

    # check that we are inside printable area
    {% if purge_x_origin > min_x  and purge_y_origin > min_y %}
    G92 E0  ; reset extruder
    G0 F{travel_speed} ; set speed
    G90  ; absolute mode
    G0 X{purge_x_origin} Y{purge_y_origin}  ; go to purge start line
    G0 Z{purge_height}
    M83  ; set extrusion relative
    G1 E{tip_distance} F{purge_move_speed}  ; extrude till filament
    G1 X{purge_x_origin + purge_amount * 2} E{purge_amount} F{purge_move_speed} ; Purge line
    {RETRACT}
    G0 X{purge_x_origin + purge_amount * 2 + 10} F{travel_speed}
    G92 E0
    M82
    G0 Z{purge_height * 3} F{travel_speed}
    {% endif %}

    RESTORE_GCODE_STATE NAME=Prepurge_State


[gcode_macro CLEAN_NOZZLE_BRUSH]
gcode:
    # NOTE: this is outdated, was for a dremel brush
    G90
    G1 X117 Y-118 Z15 F15000
    G1 X117 Y-112 Z15 F15000
    G1 X110 Y-112 Z15 F15000
    G1 X110 Y-118 Z15 F15000
    G1 X117 Y-118 Z15 F15000
    G1 X117 Y-112 Z15 F15000
    G1 X110 Y-112 Z15 F15000
    G1 X110 Y-118 Z15 F15000
    G1 X117 Y-118 Z15 F15000
    G1 X117 Y-112 Z15 F15000
    G1 X110 Y-112 Z15 F15000
    G1 X110 Y-118 Z15 F15000
    G1 Z50

[gcode_macro CLEAN_NOZZLE]
gcode:
    G90
    G1 Z30 F15000
    G1 X105 Y-114 F15000
    G1 X105 Y-114 Z15 F15000
    G1 X105 Y-101 Z15 F15000
    G1 X105 Y-114 Z15 F15000
    G1 X105 Y-101 Z15 F15000
    G1 X105 Y-114 Z15 F15000
    G1 X105 Y-101 Z15 F15000
    G1 X105 Y-114 Z15 F15000
    G1 X105 Y-101 Z15 F15000
    G1 Z30 

[gcode_macro START_PRINT]
gcode:
    POWER_ON_PRINTER
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER_TEMP = 150.0 %}

    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={EXTRUDER_TEMP}
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={BED_TEMP}
    {% if printer.toolhead.homed_axes != "xyz" %}
        G28
    {% endif %}

    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={EXTRUDER_TEMP}
    CLEAN_NOZZLE
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={BED_TEMP - 1}
    CLEAN_NOZZLE
    G1 Z30
    G1 X105 Y-60
    M204 S100 ; slow down
    BED_MESH_CALIBRATE PROFILE="default"
    M204 S6000
    G1 Z30
    CLEAN_NOZZLE
  
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(210)|float %}
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={EXTRUDER_TEMP}

    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={EXTRUDER_TEMP}
    CLEAN_NOZZLE

    LINE_PURGE

[gcode_macro END_PRINT]
gcode:
    G92 E0 ; reset filament position
    G1 E-5.0 F300 ; prevent oozing
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET=0
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=0
    G28 ; home X axis
    M84 ; disable motors

[gcode_macro COLD_PULL]
gcode:
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET=210
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM=210

    SET_HEATER_TEMPERATURE HEATER=extruder TARGET=0
    TEMPERATURE_WAIT SENSOR=extruder MAXIMUM=100
    G92 E0 ; reset filament position
    G1 E-100.0 F50

[gcode_macro LOAD_FILAMENT]
gcode:
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET=220
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM=220
    G92 E0 ; reset filament position
    G1 F300 E50 ; allow user to feed in
    G1 F3000 E600 ; feed from black line close to hotend
    G1 F300 E700 ; feed into hotend and extrude
    G1 F3000 E695 ; try to avoid at least some oozing
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET=0

[gcode_macro UNLOAD_FILAMENT]
gcode:
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET=170
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM=170
    G92 E0 ; reset filament position
    G1 F3000 E-100
    G1 F3000 E-650 ; feed from black line close to hotend
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET=0